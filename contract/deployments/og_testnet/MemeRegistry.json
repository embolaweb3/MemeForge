{
  "address": "0x15B7392781F30d1b9851dB68518BbfF5cf418466",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serviceType",
          "type": "string"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "storageHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "caption",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "MemeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLikeCount",
          "type": "uint256"
        }
      ],
      "name": "MemeLiked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "remixId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalMemeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remixer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newStorageHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newCaption",
          "type": "string"
        }
      ],
      "name": "MemeRemixed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "memeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TipSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMIX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_storageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_caption",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_prompt",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isAIGenerated",
          "type": "bool"
        }
      ],
      "name": "createMeme",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memeId",
          "type": "uint256"
        }
      ],
      "name": "getMeme",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "storageHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "caption",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prompt",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "likeCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remixCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tipAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAIGenerated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MemeRegistry.Meme",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memeId",
          "type": "uint256"
        }
      ],
      "name": "getMemeRemixes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "originalMemeId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "remixer",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "newStorageHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "newCaption",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct MemeRegistry.Remix[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserMemes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "storageHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "caption",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "prompt",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "likeCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remixCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tipAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAIGenerated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct MemeRegistry.Meme[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "hasLiked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memeId",
          "type": "uint256"
        }
      ],
      "name": "likeMeme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "likes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memeRemixes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "memes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "storageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "imageUrl",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "caption",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prompt",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "likeCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remixCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAIGenerated",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remixCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_originalMemeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_newStorageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_newCaption",
          "type": "string"
        }
      ],
      "name": "remixMeme",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "remixes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originalMemeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "remixer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newStorageHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "newCaption",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_memeId",
          "type": "uint256"
        }
      ],
      "name": "tipCreator",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "usedStorageHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMemes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb76909abfa92990ae167564c0839aaec790e663a4f6d20baf7675c981f146fc",
  "receipt": {
    "to": null,
    "from": "0x03b5AD7cD8EFeaC72d50444ae53ebA424CEBCEab",
    "contractAddress": "0x15B7392781F30d1b9851dB68518BbfF5cf418466",
    "transactionIndex": 0,
    "gasUsed": "2298676",
    "logsBloom": "0x
    "blockHash": "0xb25547e505b21d335c5778bf67c05ecfc85bbce9515349f57912a0bd7b8863d5",
    "transactionHash": "0xcb76909abfa92990ae167564c0839aaec790e663a4f6d20baf7675c981f146fc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2057295,
        "transactionHash": "0xcb76909abfa92990ae167564c0839aaec790e663a4f6d20baf7675c981f146fc",
        "address": "0x15B7392781F30d1b9851dB68518BbfF5cf418466",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000003b5ad7cd8efeac72d50444ae53eba424cebceab"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb25547e505b21d335c5778bf67c05ecfc85bbce9515349f57912a0bd7b8863d5"
      }
    ],
    "blockNumber": 2057295,
    "cumulativeGasUsed": "2298676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d3c3d3094cc2c6663935527f2ccb71d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceType\",\"type\":\"string\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"storageHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MemeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLikeCount\",\"type\":\"uint256\"}],\"name\":\"MemeLiked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remixId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalMemeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remixer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newStorageHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newCaption\",\"type\":\"string\"}],\"name\":\"MemeRemixed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"memeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TipSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMIX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_storageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_prompt\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isAIGenerated\",\"type\":\"bool\"}],\"name\":\"createMeme\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memeId\",\"type\":\"uint256\"}],\"name\":\"getMeme\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"storageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remixCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAIGenerated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MemeRegistry.Meme\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memeId\",\"type\":\"uint256\"}],\"name\":\"getMemeRemixes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalMemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"remixer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newStorageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newCaption\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct MemeRegistry.Remix[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserMemes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"storageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remixCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAIGenerated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct MemeRegistry.Meme[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasLiked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memeId\",\"type\":\"uint256\"}],\"name\":\"likeMeme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"likes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memeRemixes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"memes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"storageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"likeCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remixCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAIGenerated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remixCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originalMemeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newStorageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_newCaption\",\"type\":\"string\"}],\"name\":\"remixMeme\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remixes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalMemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"remixer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newStorageHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newCaption\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_memeId\",\"type\":\"uint256\"}],\"name\":\"tipCreator\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"usedStorageHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMemes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"createMeme(string,string,string,string,bool)\":{\"details\":\"Create a new meme with payment\"},\"getMeme(uint256)\":{\"details\":\"Get meme details\"},\"getMemeRemixes(uint256)\":{\"details\":\"Get remixes for a meme\"},\"getUserMemes(address)\":{\"details\":\"Get user's memes\"},\"hasLiked(uint256,address)\":{\"details\":\"Check if user liked a meme\"},\"likeMeme(uint256)\":{\"details\":\"Like a meme (free but requires gas)\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remixMeme(uint256,string,string)\":{\"details\":\"Remix an existing meme\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"tipCreator(uint256)\":{\"details\":\"Tip a meme creator\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFees()\":{\"details\":\"Withdraw contract funds (owner only)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MemeRegistry.sol\":\"MemeRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/MemeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract MemeRegistry is Ownable, ReentrancyGuard {\\n    struct Meme {\\n        uint256 id;\\n        address creator;\\n        string storageHash;\\n        string imageUrl;\\n        string caption;\\n        string prompt;\\n        uint256 timestamp;\\n        uint256 likeCount;\\n        uint256 remixCount;\\n        uint256 tipAmount;\\n        bool isAIGenerated;\\n        bool exists;\\n    }\\n\\n    struct Remix {\\n        uint256 id;\\n        uint256 originalMemeId;\\n        address remixer;\\n        string newStorageHash;\\n        string newCaption;\\n        uint256 timestamp;\\n    }\\n\\n    // Constants\\n    uint256 public constant MINT_FEE = 0.001 ether; // 0.001 ZGS\\n    uint256 public constant REMIX_FEE = 0.0005 ether; // 0.0005 ZGS\\n\\n    // State variables\\n    uint256 public memeCounter;\\n    uint256 public remixCounter;\\n    uint256 public totalTips;\\n\\n    // Mappings\\n    mapping(uint256 => Meme) public memes;\\n    mapping(uint256 => Remix) public remixes;\\n    mapping(uint256 => mapping(address => bool)) public likes;\\n    mapping(address => uint256[]) public userMemes;\\n    mapping(uint256 => uint256[]) public memeRemixes;\\n    mapping(string => bool) public usedStorageHashes;\\n\\n    // Events\\n    event MemeCreated(\\n        uint256 indexed memeId,\\n        address indexed creator,\\n        string storageHash,\\n        string caption,\\n        uint256 timestamp\\n    );\\n\\n    event MemeRemixed(\\n        uint256 indexed remixId,\\n        uint256 indexed originalMemeId,\\n        address indexed remixer,\\n        string newStorageHash,\\n        string newCaption\\n    );\\n\\n    event MemeLiked(\\n        uint256 indexed memeId,\\n        address indexed liker,\\n        uint256 newLikeCount\\n    );\\n\\n    event TipSent(\\n        uint256 indexed memeId,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    event FeePaid(address indexed user, uint256 amount, string serviceType);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Create a new meme with payment\\n     */\\n    function createMeme(\\n        string memory _storageHash,\\n        string memory _imageUrl,\\n        string memory _caption,\\n        string memory _prompt,\\n        bool _isAIGenerated\\n    ) external payable nonReentrant returns (uint256) {\\n        require(msg.value >= MINT_FEE, \\\"Insufficient payment\\\");\\n        require(!usedStorageHashes[_storageHash], \\\"Storage hash already used\\\");\\n        require(bytes(_storageHash).length > 0, \\\"Storage hash required\\\");\\n\\n        // Check if user sent more than required, refund excess\\n        if (msg.value > MINT_FEE) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: msg.value - MINT_FEE\\n            }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n\\n        memeCounter++;\\n        uint256 newMemeId = memeCounter;\\n\\n        memes[newMemeId] = Meme({\\n            id: newMemeId,\\n            creator: msg.sender,\\n            storageHash: _storageHash,\\n            imageUrl: _imageUrl,\\n            caption: _caption,\\n            prompt: _prompt,\\n            timestamp: block.timestamp,\\n            likeCount: 0,\\n            remixCount: 0,\\n            tipAmount: 0,\\n            isAIGenerated: _isAIGenerated,\\n            exists: true\\n        });\\n\\n        usedStorageHashes[_storageHash] = true;\\n        userMemes[msg.sender].push(newMemeId);\\n\\n        emit MemeCreated(\\n            newMemeId,\\n            msg.sender,\\n            _storageHash,\\n            _caption,\\n            block.timestamp\\n        );\\n        emit FeePaid(msg.sender, MINT_FEE, \\\"meme_creation\\\");\\n\\n        return newMemeId;\\n    }\\n\\n    /**\\n     * @dev Remix an existing meme\\n     */\\n    function remixMeme(\\n        uint256 _originalMemeId,\\n        string memory _newStorageHash,\\n        string memory _newCaption\\n    ) external payable nonReentrant returns (uint256) {\\n        require(msg.value >= REMIX_FEE, \\\"Insufficient payment for remix\\\");\\n        require(memes[_originalMemeId].exists, \\\"Original meme doesn't exist\\\");\\n        require(\\n            !usedStorageHashes[_newStorageHash],\\n            \\\"Storage hash already used\\\"\\n        );\\n\\n        // Refund excess\\n        if (msg.value > REMIX_FEE) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: msg.value - REMIX_FEE\\n            }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n\\n        remixCounter++;\\n        uint256 newRemixId = remixCounter;\\n\\n        remixes[newRemixId] = Remix({\\n            id: newRemixId,\\n            originalMemeId: _originalMemeId,\\n            remixer: msg.sender,\\n            newStorageHash: _newStorageHash,\\n            newCaption: _newCaption,\\n            timestamp: block.timestamp\\n        });\\n\\n        // Update original meme remix count\\n        memes[_originalMemeId].remixCount++;\\n        usedStorageHashes[_newStorageHash] = true;\\n        memeRemixes[_originalMemeId].push(newRemixId);\\n\\n        emit MemeRemixed(\\n            newRemixId,\\n            _originalMemeId,\\n            msg.sender,\\n            _newStorageHash,\\n            _newCaption\\n        );\\n        emit FeePaid(msg.sender, REMIX_FEE, \\\"meme_remix\\\");\\n\\n        return newRemixId;\\n    }\\n\\n    /**\\n     * @dev Like a meme (free but requires gas)\\n     */\\n    function likeMeme(uint256 _memeId) external {\\n        require(memes[_memeId].exists, \\\"Meme doesn't exist\\\");\\n        require(!likes[_memeId][msg.sender], \\\"Already liked\\\");\\n\\n        likes[_memeId][msg.sender] = true;\\n        memes[_memeId].likeCount++;\\n\\n        emit MemeLiked(_memeId, msg.sender, memes[_memeId].likeCount);\\n    }\\n\\n    /**\\n     * @dev Tip a meme creator\\n     */\\n    function tipCreator(uint256 _memeId) external payable nonReentrant {\\n        require(memes[_memeId].exists, \\\"Meme doesn't exist\\\");\\n        require(msg.value > 0, \\\"Tip amount must be positive\\\");\\n        require(msg.sender != memes[_memeId].creator, \\\"Cannot tip yourself\\\");\\n\\n        address creator = memes[_memeId].creator;\\n        memes[_memeId].tipAmount += msg.value;\\n        totalTips += msg.value;\\n\\n        (bool success, ) = payable(creator).call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit TipSent(_memeId, msg.sender, creator, msg.value);\\n    }\\n\\n    /**\\n     * @dev Get meme details\\n     */\\n    function getMeme(uint256 _memeId) external view returns (Meme memory) {\\n        require(memes[_memeId].exists, \\\"Meme doesn't exist\\\");\\n        return memes[_memeId];\\n    }\\n\\n    /**\\n     * @dev Get remixes for a meme\\n     */\\n    function getMemeRemixes(\\n        uint256 _memeId\\n    ) external view returns (Remix[] memory) {\\n        uint256[] memory remixIds = memeRemixes[_memeId];\\n        Remix[] memory memeRemixesList = new Remix[](remixIds.length);\\n\\n        for (uint256 i = 0; i < remixIds.length; i++) {\\n            memeRemixesList[i] = remixes[remixIds[i]];\\n        }\\n\\n        return memeRemixesList;\\n    }\\n\\n    /**\\n     * @dev Get user's memes\\n     */\\n    function getUserMemes(address _user) external view returns (Meme[] memory) {\\n        uint256[] memory userMemeIds = userMemes[_user];\\n        Meme[] memory userMemeList = new Meme[](userMemeIds.length);\\n\\n        for (uint256 i = 0; i < userMemeIds.length; i++) {\\n            userMemeList[i] = memes[userMemeIds[i]];\\n        }\\n\\n        return userMemeList;\\n    }\\n\\n    /**\\n     * @dev Check if user liked a meme\\n     */\\n    function hasLiked(\\n        uint256 _memeId,\\n        address _user\\n    ) external view returns (bool) {\\n        return likes[_memeId][_user];\\n    }\\n\\n    /**\\n     * @dev Withdraw contract funds (owner only)\\n     */\\n    function withdrawFees() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\n        (bool success, ) = payable(owner()).call{\\n                value: balance\\n            }(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x44fc9358d8610615c34e737f1cc07f135392232c8b65696eb62a7f393ae4ca36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f5ffd5b503380603357604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b603a816043565b50600180556092565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6127b38061009f5f395ff3fe60806040526004361061013c575f3560e01c8063909c99b8116100b3578063c397c76d1161006d578063c397c76d14610392578063d73ca5dc146103a7578063d7bf81a3146103d3578063f04c8c54146103ed578063f2fde38b14610400578063fda12eae1461041f575f5ffd5b8063909c99b8146102eb578063990de8ae1461030a5780639c55a70f1461031f578063b97be95e1461033e578063b9c1342b14610351578063bf7eab0e1461037d575f5ffd5b80633dea6b9a116101045780633dea6b9a14610207578063476343ee146102335780635c12c07714610249578063715018a6146102925780638da5cb5b146102a65780638fb7092c146102cc575f5ffd5b80630c9471fd1461014057806316fc5cea146101665780631cac66531461018057806322b8be95146101b1578063388f6064146101d0575b5f5ffd5b61015361014e366004611faf565b610459565b6040519081526020015b60405180910390f35b348015610171575f5ffd5b506101536601c6bf5263400081565b34801561018b575f5ffd5b5061019f61019a36600461201c565b6107f9565b60405161015d96959493929190612061565b3480156101bc575f5ffd5b506101536101cb3660046120ce565b610945565b3480156101db575f5ffd5b506101ef6101ea36600461201c565b610970565b60405161015d9c9b9a999897969594939291906120f6565b348015610212575f5ffd5b5061022661022136600461201c565b610bf1565b60405161015d9190612282565b34801561023e575f5ffd5b50610247610ef6565b005b348015610254575f5ffd5b50610282610263366004612294565b600760209081525f928352604080842090915290825290205460ff1681565b604051901515815260200161015d565b34801561029d575f5ffd5b50610247610fb7565b3480156102b1575f5ffd5b505f546040516001600160a01b03909116815260200161015d565b3480156102d7575f5ffd5b506102826102e6366004612294565b610fca565b3480156102f6575f5ffd5b506101536103053660046122be565b610ff6565b348015610315575f5ffd5b5061015360045481565b34801561032a575f5ffd5b5061024761033936600461201c565b61100f565b61024761034c36600461201c565b611128565b34801561035c575f5ffd5b5061037061036b36600461201c565b61132b565b60405161015d91906122de565b348015610388575f5ffd5b5061015360035481565b34801561039d575f5ffd5b5061015360025481565b3480156103b2575f5ffd5b506103c66103c1366004612399565b6115e9565b60405161015d91906123b2565b3480156103de575f5ffd5b5061015366038d7ea4c6800081565b6101536103fb366004612409565b6119ca565b34801561040b575f5ffd5b5061024761041a366004612399565b611dcb565b34801561042a575f5ffd5b506102826104393660046124da565b8051602081830181018051600a8252928201919093012091525460ff1681565b5f610462611e05565b6601c6bf526340003410156104be5760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74207061796d656e7420666f722072656d6978000060448201526064015b60405180910390fd5b5f848152600560205260409020600a0154610100900460ff166105235760405162461bcd60e51b815260206004820152601b60248201527f4f726967696e616c206d656d6520646f65736e2774206578697374000000000060448201526064016104b5565b600a836040516105339190612514565b9081526040519081900360200190205460ff161561058f5760405162461bcd60e51b815260206004820152601960248201527814dd1bdc9859d9481a185cda08185b1c9958591e481d5cd959603a1b60448201526064016104b5565b6601c6bf52634000341115610612575f336105b16601c6bf526340003461253e565b6040515f81818185875af1925050503d805f81146105ea576040519150601f19603f3d011682016040523d82523d5f602084013e6105ef565b606091505b50509050806106105760405162461bcd60e51b81526004016104b590612551565b505b60038054905f6106218361257a565b9091555050600380546040805160c081018252828152602080820189815233838501908152606084018a8152608085018a90524260a08601525f878152600690945294909220835181559051600182015590516002820180546001600160a01b0319166001600160a01b03909216919091179055915192939092908201906106a99082612616565b50608082015160048201906106be9082612616565b5060a091909101516005918201555f868152602091909152604081206008018054916106e98361257a565b91905055506001600a856040516107009190612514565b9081526040805160209281900383018120805460ff1916941515949094179093555f888152600983529081208054600181018255908252919020018290553390869083907feff3be91d721f2196794f615914af5354f6f9ef61da7ae785ebc7d0f3b907c879061077390899089906126d1565b60405180910390a4336001600160a01b03167f3e3d11fed2579ab23676d30f4893a503a2a74a2d3610026a21a83c39e2a85e2e6601c6bf526340006040516107df918152604060208201819052600a90820152690dacadacabee4cadad2f60b31b606082015260800190565b60405180910390a290506107f260018055565b9392505050565b60066020525f90815260409020805460018201546002830154600384018054939492936001600160a01b03909216929161083290612592565b80601f016020809104026020016040519081016040528092919081815260200182805461085e90612592565b80156108a95780601f10610880576101008083540402835291602001916108a9565b820191905f5260205f20905b81548152906001019060200180831161088c57829003601f168201915b5050505050908060040180546108be90612592565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90612592565b80156109355780601f1061090c57610100808354040283529160200191610935565b820191905f5260205f20905b81548152906001019060200180831161091857829003601f168201915b5050505050908060050154905086565b6008602052815f5260405f20818154811061095e575f80fd5b905f5260205f20015f91509150505481565b60056020525f908152604090208054600182015460028301805492936001600160a01b03909216926109a190612592565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90612592565b8015610a185780601f106109ef57610100808354040283529160200191610a18565b820191905f5260205f20905b8154815290600101906020018083116109fb57829003601f168201915b505050505090806003018054610a2d90612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5990612592565b8015610aa45780601f10610a7b57610100808354040283529160200191610aa4565b820191905f5260205f20905b815481529060010190602001808311610a8757829003601f168201915b505050505090806004018054610ab990612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae590612592565b8015610b305780601f10610b0757610100808354040283529160200191610b30565b820191905f5260205f20905b815481529060010190602001808311610b1357829003601f168201915b505050505090806005018054610b4590612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7190612592565b8015610bbc5780601f10610b9357610100808354040283529160200191610bbc565b820191905f5260205f20905b815481529060010190602001808311610b9f57829003601f168201915b5050506006840154600785015460088601546009870154600a9097015495969295919450925060ff808216916101009004168c565b610bf9611eaa565b5f828152600560205260409020600a0154610100900460ff16610c2e5760405162461bcd60e51b81526004016104b5906126f5565b5f828152600560209081526040918290208251610180810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610c7890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612592565b8015610cef5780601f10610cc657610100808354040283529160200191610cef565b820191905f5260205f20905b815481529060010190602001808311610cd257829003601f168201915b50505050508152602001600382018054610d0890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3490612592565b8015610d7f5780601f10610d5657610100808354040283529160200191610d7f565b820191905f5260205f20905b815481529060010190602001808311610d6257829003601f168201915b50505050508152602001600482018054610d9890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc490612592565b8015610e0f5780601f10610de657610100808354040283529160200191610e0f565b820191905f5260205f20905b815481529060010190602001808311610df257829003601f168201915b50505050508152602001600582018054610e2890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490612592565b8015610e9f5780601f10610e7657610100808354040283529160200191610e9f565b820191905f5260205f20905b815481529060010190602001808311610e8257829003601f168201915b505050918352505060068201546020820152600782015460408201526008820154606082015260098201546080820152600a9091015460ff808216151560a084015261010090910416151560c09091015292915050565b610efe611e2f565b4780610f435760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064016104b5565b5f80546040516001600160a01b039091169083908381818185875af1925050503d805f8114610f8d576040519150601f19603f3d011682016040523d82523d5f602084013e610f92565b606091505b5050905080610fb35760405162461bcd60e51b81526004016104b590612551565b5050565b610fbf611e2f565b610fc85f611e5b565b565b5f8281526007602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6009602052815f5260405f20818154811061095e575f80fd5b5f818152600560205260409020600a0154610100900460ff166110445760405162461bcd60e51b81526004016104b5906126f5565b5f81815260076020908152604080832033845290915290205460ff161561109d5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481b1a5ad959609a1b60448201526064016104b5565b5f8181526007602081815260408084203385528252808420805460ff1916600117905584845260059091528220018054916110d78361257a565b90915550505f81815260056020908152604091829020600701549151918252339183917f6fdda780bf1354c4cfac125df745381c3dcf5879946a17a8ae855fcc87ada34f910160405180910390a350565b611130611e05565b5f818152600560205260409020600a0154610100900460ff166111655760405162461bcd60e51b81526004016104b5906126f5565b5f34116111b45760405162461bcd60e51b815260206004820152601b60248201527f54697020616d6f756e74206d75737420626520706f736974697665000000000060448201526064016104b5565b5f818152600560205260409020600101546001600160a01b031633036112125760405162461bcd60e51b815260206004820152601360248201527221b0b73737ba103a34b8103cb7bab939b2b63360691b60448201526064016104b5565b5f8181526005602052604081206001810154600990910180546001600160a01b03909216923492611244908490612721565b925050819055503460045f82825461125c9190612721565b90915550506040515f906001600160a01b0383169034908381818185875af1925050503d805f81146112a9576040519150601f19603f3d011682016040523d82523d5f602084013e6112ae565b606091505b50509050806112cf5760405162461bcd60e51b81526004016104b590612551565b816001600160a01b0316336001600160a01b0316847f471bff7634a7f1379732c73e55b97bcd606d0c2e2689abd6e0a729391ef3ba1b3460405161131591815260200190565b60405180910390a4505061132860018055565b50565b5f81815260096020908152604080832080548251818502810185019093528083526060949383018282801561137d57602002820191905f5260205f20905b815481526020019060010190808311611369575b505050505090505f815167ffffffffffffffff81111561139f5761139f611f10565b60405190808252806020026020018201604052801561140e57816020015b6113fb6040518060c001604052805f81526020015f81526020015f6001600160a01b0316815260200160608152602001606081526020015f81525090565b8152602001906001900390816113bd5790505b5090505f5b82518110156115e15760065f84838151811061143157611431612734565b602002602001015181526020019081526020015f206040518060c00160405290815f820154815260200160018201548152602001600282015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820180546114a290612592565b80601f01602080910402602001604051908101604052809291908181526020018280546114ce90612592565b80156115195780601f106114f057610100808354040283529160200191611519565b820191905f5260205f20905b8154815290600101906020018083116114fc57829003601f168201915b5050505050815260200160048201805461153290612592565b80601f016020809104026020016040519081016040528092919081815260200182805461155e90612592565b80156115a95780601f10611580576101008083540402835291602001916115a9565b820191905f5260205f20905b81548152906001019060200180831161158c57829003601f168201915b505050505081526020016005820154815250508282815181106115ce576115ce612734565b6020908102919091010152600101611413565b509392505050565b6001600160a01b0381165f90815260086020908152604080832080548251818502810185019093528083526060949383018282801561164557602002820191905f5260205f20905b815481526020019060010190808311611631575b505050505090505f815167ffffffffffffffff81111561166757611667611f10565b6040519080825280602002602001820160405280156116a057816020015b61168d611eaa565b8152602001906001900390816116855790505b5090505f5b82518110156115e15760055f8483815181106116c3576116c3612734565b602002602001015181526020019081526020015f20604051806101800160405290815f8201548152602001600182015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461172b90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461175790612592565b80156117a25780601f10611779576101008083540402835291602001916117a2565b820191905f5260205f20905b81548152906001019060200180831161178557829003601f168201915b505050505081526020016003820180546117bb90612592565b80601f01602080910402602001604051908101604052809291908181526020018280546117e790612592565b80156118325780601f1061180957610100808354040283529160200191611832565b820191905f5260205f20905b81548152906001019060200180831161181557829003601f168201915b5050505050815260200160048201805461184b90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461187790612592565b80156118c25780601f10611899576101008083540402835291602001916118c2565b820191905f5260205f20905b8154815290600101906020018083116118a557829003601f168201915b505050505081526020016005820180546118db90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461190790612592565b80156119525780601f1061192957610100808354040283529160200191611952565b820191905f5260205f20905b81548152906001019060200180831161193557829003601f168201915b505050918352505060068201546020820152600782015460408201526008820154606082015260098201546080820152600a9091015460ff808216151560a084015261010090910416151560c09091015282518390839081106119b7576119b7612734565b60209081029190910101526001016116a5565b5f6119d3611e05565b66038d7ea4c68000341015611a215760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104b5565b600a86604051611a319190612514565b9081526040519081900360200190205460ff1615611a8d5760405162461bcd60e51b815260206004820152601960248201527814dd1bdc9859d9481a185cda08185b1c9958591e481d5cd959603a1b60448201526064016104b5565b5f865111611ad55760405162461bcd60e51b815260206004820152601560248201527414dd1bdc9859d9481a185cda081c995c5d5a5c9959605a1b60448201526064016104b5565b66038d7ea4c68000341115611b58575f33611af766038d7ea4c680003461253e565b6040515f81818185875af1925050503d805f8114611b30576040519150601f19603f3d011682016040523d82523d5f602084013e611b35565b606091505b5050905080611b565760405162461bcd60e51b81526004016104b590612551565b505b60028054905f611b678361257a565b90915550506002805460408051610180810182528281523360208083019182528284018c8152606084018c9052608084018b905260a084018a90524260c08501525f60e08501819052610100850181905261012085018190528915156101408601526001610160860181905287825260059093529490942083518155915190820180546001600160a01b0319166001600160a01b0390921691909117905591519293909290820190611c199082612616565b5060608201516003820190611c2e9082612616565b5060808201516004820190611c439082612616565b5060a08201516005820190611c589082612616565b5060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a92830180546101609095015161ffff1990951691151561ff001916919091179315159091029290921790915560405160019190611cca908a90612514565b9081526040805160209281900383018120805460ff191694151594909417909355335f818152600884529182208054600181018255908352929091209091018390559082907fce9f5a0bc9f8c8cfa4e842523cd06798567d394210752666816e6c2bdb8f3cd290611d40908b908a904290612748565b60405180910390a3336001600160a01b03167f3e3d11fed2579ab23676d30f4893a503a2a74a2d3610026a21a83c39e2a85e2e66038d7ea4c68000604051611daf918152604060208201819052600d908201526c36b2b6b2afb1b932b0ba34b7b760991b606082015260800190565b60405180910390a29050611dc260018055565b95945050505050565b611dd3611e2f565b6001600160a01b038116611dfc57604051631e4fbdf760e01b81525f60048201526024016104b5565b61132881611e5b565b600260015403611e2857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5f546001600160a01b03163314610fc85760405163118cdaa760e01b81523360048201526024016104b5565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061018001604052805f81526020015f6001600160a01b03168152602001606081526020016060815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f151581525090565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611f33575f5ffd5b813567ffffffffffffffff811115611f4d57611f4d611f10565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611f7c57611f7c611f10565b604052818152838201602001851015611f93575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f60608486031215611fc1575f5ffd5b83359250602084013567ffffffffffffffff811115611fde575f5ffd5b611fea86828701611f24565b925050604084013567ffffffffffffffff811115612006575f5ffd5b61201286828701611f24565b9150509250925092565b5f6020828403121561202c575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b86815285602082015260018060a01b038516604082015260c060608201525f61208d60c0830186612033565b828103608084015261209f8186612033565b9150508260a0830152979650505050505050565b80356001600160a01b03811681146120c9575f5ffd5b919050565b5f5f604083850312156120df575f5ffd5b6120e8836120b3565b946020939093013593505050565b8c81526001600160a01b038c166020820152610180604082018190525f906121209083018d612033565b8281036060840152612132818d612033565b90508281036080840152612146818c612033565b905082810360a084015261215a818b612033565b9150508760c08301528660e0830152856101008301528461012083015261218661014083018515159052565b8215156101608301529d9c50505050505050505050505050565b805182525f60208201516121bf60208501826001600160a01b03169052565b50604082015161018060408501526121db610180850182612033565b9050606083015184820360608601526121f48282612033565b9150506080830151848203608086015261220e8282612033565b91505060a083015184820360a08601526122288282612033565b91505060c083015160c085015260e083015160e085015261010083015161010085015261012083015161012085015261014083015161226c61014086018215159052565b506101608301516115e161016086018215159052565b602081525f6107f260208301846121a0565b5f5f604083850312156122a5575f5ffd5b823591506122b5602084016120b3565b90509250929050565b5f5f604083850312156122cf575f5ffd5b50508035926020909101359150565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561238d57603f198786030184528151805186526020810151602087015260018060a01b036040820151166040870152606081015160c0606088015261235060c0880182612033565b9050608082015187820360808901526123698282612033565b60a09384015198909301979097525094506020938401939190910190600101612304565b50929695505050505050565b5f602082840312156123a9575f5ffd5b6107f2826120b3565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561238d57603f198786030184526123f48583516121a0565b945060209384019391909101906001016123d8565b5f5f5f5f5f60a0868803121561241d575f5ffd5b853567ffffffffffffffff811115612433575f5ffd5b61243f88828901611f24565b955050602086013567ffffffffffffffff81111561245b575f5ffd5b61246788828901611f24565b945050604086013567ffffffffffffffff811115612483575f5ffd5b61248f88828901611f24565b935050606086013567ffffffffffffffff8111156124ab575f5ffd5b6124b788828901611f24565b925050608086013580151581146124cc575f5ffd5b809150509295509295909350565b5f602082840312156124ea575f5ffd5b813567ffffffffffffffff811115612500575f5ffd5b61250c84828501611f24565b949350505050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610ff057610ff061252a565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b5f6001820161258b5761258b61252a565b5060010190565b600181811c908216806125a657607f821691505b6020821081036125c457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561261157805f5260205f20601f840160051c810160208510156125ef5750805b601f840160051c820191505b8181101561260e575f81556001016125fb565b50505b505050565b815167ffffffffffffffff81111561263057612630611f10565b6126448161263e8454612592565b846125ca565b6020601f821160018114612676575f831561265f5750848201515b5f19600385901b1c1916600184901b17845561260e565b5f84815260208120601f198516915b828110156126a55787850151825560209485019460019092019101612685565b50848210156126c257868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b604081525f6126e36040830185612033565b8281036020840152611dc28185612033565b60208082526012908201527113595b5948191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b80820180821115610ff057610ff061252a565b634e487b7160e01b5f52603260045260245ffd5b606081525f61275a6060830186612033565b828103602084015261276c8186612033565b91505082604083015294935050505056fea26469706673582212205563df76a833ffc5ecd392139d17e58971d72cedf23cfa15846927eedb6ffcc164736f6c634300081c0033",
  "deployedBytecode": "0x60806040526004361061013c575f3560e01c8063909c99b8116100b3578063c397c76d1161006d578063c397c76d14610392578063d73ca5dc146103a7578063d7bf81a3146103d3578063f04c8c54146103ed578063f2fde38b14610400578063fda12eae1461041f575f5ffd5b8063909c99b8146102eb578063990de8ae1461030a5780639c55a70f1461031f578063b97be95e1461033e578063b9c1342b14610351578063bf7eab0e1461037d575f5ffd5b80633dea6b9a116101045780633dea6b9a14610207578063476343ee146102335780635c12c07714610249578063715018a6146102925780638da5cb5b146102a65780638fb7092c146102cc575f5ffd5b80630c9471fd1461014057806316fc5cea146101665780631cac66531461018057806322b8be95146101b1578063388f6064146101d0575b5f5ffd5b61015361014e366004611faf565b610459565b6040519081526020015b60405180910390f35b348015610171575f5ffd5b506101536601c6bf5263400081565b34801561018b575f5ffd5b5061019f61019a36600461201c565b6107f9565b60405161015d96959493929190612061565b3480156101bc575f5ffd5b506101536101cb3660046120ce565b610945565b3480156101db575f5ffd5b506101ef6101ea36600461201c565b610970565b60405161015d9c9b9a999897969594939291906120f6565b348015610212575f5ffd5b5061022661022136600461201c565b610bf1565b60405161015d9190612282565b34801561023e575f5ffd5b50610247610ef6565b005b348015610254575f5ffd5b50610282610263366004612294565b600760209081525f928352604080842090915290825290205460ff1681565b604051901515815260200161015d565b34801561029d575f5ffd5b50610247610fb7565b3480156102b1575f5ffd5b505f546040516001600160a01b03909116815260200161015d565b3480156102d7575f5ffd5b506102826102e6366004612294565b610fca565b3480156102f6575f5ffd5b506101536103053660046122be565b610ff6565b348015610315575f5ffd5b5061015360045481565b34801561032a575f5ffd5b5061024761033936600461201c565b61100f565b61024761034c36600461201c565b611128565b34801561035c575f5ffd5b5061037061036b36600461201c565b61132b565b60405161015d91906122de565b348015610388575f5ffd5b5061015360035481565b34801561039d575f5ffd5b5061015360025481565b3480156103b2575f5ffd5b506103c66103c1366004612399565b6115e9565b60405161015d91906123b2565b3480156103de575f5ffd5b5061015366038d7ea4c6800081565b6101536103fb366004612409565b6119ca565b34801561040b575f5ffd5b5061024761041a366004612399565b611dcb565b34801561042a575f5ffd5b506102826104393660046124da565b8051602081830181018051600a8252928201919093012091525460ff1681565b5f610462611e05565b6601c6bf526340003410156104be5760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e74207061796d656e7420666f722072656d6978000060448201526064015b60405180910390fd5b5f848152600560205260409020600a0154610100900460ff166105235760405162461bcd60e51b815260206004820152601b60248201527f4f726967696e616c206d656d6520646f65736e2774206578697374000000000060448201526064016104b5565b600a836040516105339190612514565b9081526040519081900360200190205460ff161561058f5760405162461bcd60e51b815260206004820152601960248201527814dd1bdc9859d9481a185cda08185b1c9958591e481d5cd959603a1b60448201526064016104b5565b6601c6bf52634000341115610612575f336105b16601c6bf526340003461253e565b6040515f81818185875af1925050503d805f81146105ea576040519150601f19603f3d011682016040523d82523d5f602084013e6105ef565b606091505b50509050806106105760405162461bcd60e51b81526004016104b590612551565b505b60038054905f6106218361257a565b9091555050600380546040805160c081018252828152602080820189815233838501908152606084018a8152608085018a90524260a08601525f878152600690945294909220835181559051600182015590516002820180546001600160a01b0319166001600160a01b03909216919091179055915192939092908201906106a99082612616565b50608082015160048201906106be9082612616565b5060a091909101516005918201555f868152602091909152604081206008018054916106e98361257a565b91905055506001600a856040516107009190612514565b9081526040805160209281900383018120805460ff1916941515949094179093555f888152600983529081208054600181018255908252919020018290553390869083907feff3be91d721f2196794f615914af5354f6f9ef61da7ae785ebc7d0f3b907c879061077390899089906126d1565b60405180910390a4336001600160a01b03167f3e3d11fed2579ab23676d30f4893a503a2a74a2d3610026a21a83c39e2a85e2e6601c6bf526340006040516107df918152604060208201819052600a90820152690dacadacabee4cadad2f60b31b606082015260800190565b60405180910390a290506107f260018055565b9392505050565b60066020525f90815260409020805460018201546002830154600384018054939492936001600160a01b03909216929161083290612592565b80601f016020809104026020016040519081016040528092919081815260200182805461085e90612592565b80156108a95780601f10610880576101008083540402835291602001916108a9565b820191905f5260205f20905b81548152906001019060200180831161088c57829003601f168201915b5050505050908060040180546108be90612592565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea90612592565b80156109355780601f1061090c57610100808354040283529160200191610935565b820191905f5260205f20905b81548152906001019060200180831161091857829003601f168201915b5050505050908060050154905086565b6008602052815f5260405f20818154811061095e575f80fd5b905f5260205f20015f91509150505481565b60056020525f908152604090208054600182015460028301805492936001600160a01b03909216926109a190612592565b80601f01602080910402602001604051908101604052809291908181526020018280546109cd90612592565b8015610a185780601f106109ef57610100808354040283529160200191610a18565b820191905f5260205f20905b8154815290600101906020018083116109fb57829003601f168201915b505050505090806003018054610a2d90612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5990612592565b8015610aa45780601f10610a7b57610100808354040283529160200191610aa4565b820191905f5260205f20905b815481529060010190602001808311610a8757829003601f168201915b505050505090806004018054610ab990612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae590612592565b8015610b305780601f10610b0757610100808354040283529160200191610b30565b820191905f5260205f20905b815481529060010190602001808311610b1357829003601f168201915b505050505090806005018054610b4590612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7190612592565b8015610bbc5780601f10610b9357610100808354040283529160200191610bbc565b820191905f5260205f20905b815481529060010190602001808311610b9f57829003601f168201915b5050506006840154600785015460088601546009870154600a9097015495969295919450925060ff808216916101009004168c565b610bf9611eaa565b5f828152600560205260409020600a0154610100900460ff16610c2e5760405162461bcd60e51b81526004016104b5906126f5565b5f828152600560209081526040918290208251610180810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191610c7890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca490612592565b8015610cef5780601f10610cc657610100808354040283529160200191610cef565b820191905f5260205f20905b815481529060010190602001808311610cd257829003601f168201915b50505050508152602001600382018054610d0890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3490612592565b8015610d7f5780601f10610d5657610100808354040283529160200191610d7f565b820191905f5260205f20905b815481529060010190602001808311610d6257829003601f168201915b50505050508152602001600482018054610d9890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc490612592565b8015610e0f5780601f10610de657610100808354040283529160200191610e0f565b820191905f5260205f20905b815481529060010190602001808311610df257829003601f168201915b50505050508152602001600582018054610e2890612592565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5490612592565b8015610e9f5780601f10610e7657610100808354040283529160200191610e9f565b820191905f5260205f20905b815481529060010190602001808311610e8257829003601f168201915b505050918352505060068201546020820152600782015460408201526008820154606082015260098201546080820152600a9091015460ff808216151560a084015261010090910416151560c09091015292915050565b610efe611e2f565b4780610f435760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064016104b5565b5f80546040516001600160a01b039091169083908381818185875af1925050503d805f8114610f8d576040519150601f19603f3d011682016040523d82523d5f602084013e610f92565b606091505b5050905080610fb35760405162461bcd60e51b81526004016104b590612551565b5050565b610fbf611e2f565b610fc85f611e5b565b565b5f8281526007602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b6009602052815f5260405f20818154811061095e575f80fd5b5f818152600560205260409020600a0154610100900460ff166110445760405162461bcd60e51b81526004016104b5906126f5565b5f81815260076020908152604080832033845290915290205460ff161561109d5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481b1a5ad959609a1b60448201526064016104b5565b5f8181526007602081815260408084203385528252808420805460ff1916600117905584845260059091528220018054916110d78361257a565b90915550505f81815260056020908152604091829020600701549151918252339183917f6fdda780bf1354c4cfac125df745381c3dcf5879946a17a8ae855fcc87ada34f910160405180910390a350565b611130611e05565b5f818152600560205260409020600a0154610100900460ff166111655760405162461bcd60e51b81526004016104b5906126f5565b5f34116111b45760405162461bcd60e51b815260206004820152601b60248201527f54697020616d6f756e74206d75737420626520706f736974697665000000000060448201526064016104b5565b5f818152600560205260409020600101546001600160a01b031633036112125760405162461bcd60e51b815260206004820152601360248201527221b0b73737ba103a34b8103cb7bab939b2b63360691b60448201526064016104b5565b5f8181526005602052604081206001810154600990910180546001600160a01b03909216923492611244908490612721565b925050819055503460045f82825461125c9190612721565b90915550506040515f906001600160a01b0383169034908381818185875af1925050503d805f81146112a9576040519150601f19603f3d011682016040523d82523d5f602084013e6112ae565b606091505b50509050806112cf5760405162461bcd60e51b81526004016104b590612551565b816001600160a01b0316336001600160a01b0316847f471bff7634a7f1379732c73e55b97bcd606d0c2e2689abd6e0a729391ef3ba1b3460405161131591815260200190565b60405180910390a4505061132860018055565b50565b5f81815260096020908152604080832080548251818502810185019093528083526060949383018282801561137d57602002820191905f5260205f20905b815481526020019060010190808311611369575b505050505090505f815167ffffffffffffffff81111561139f5761139f611f10565b60405190808252806020026020018201604052801561140e57816020015b6113fb6040518060c001604052805f81526020015f81526020015f6001600160a01b0316815260200160608152602001606081526020015f81525090565b8152602001906001900390816113bd5790505b5090505f5b82518110156115e15760065f84838151811061143157611431612734565b602002602001015181526020019081526020015f206040518060c00160405290815f820154815260200160018201548152602001600282015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820180546114a290612592565b80601f01602080910402602001604051908101604052809291908181526020018280546114ce90612592565b80156115195780601f106114f057610100808354040283529160200191611519565b820191905f5260205f20905b8154815290600101906020018083116114fc57829003601f168201915b5050505050815260200160048201805461153290612592565b80601f016020809104026020016040519081016040528092919081815260200182805461155e90612592565b80156115a95780601f10611580576101008083540402835291602001916115a9565b820191905f5260205f20905b81548152906001019060200180831161158c57829003601f168201915b505050505081526020016005820154815250508282815181106115ce576115ce612734565b6020908102919091010152600101611413565b509392505050565b6001600160a01b0381165f90815260086020908152604080832080548251818502810185019093528083526060949383018282801561164557602002820191905f5260205f20905b815481526020019060010190808311611631575b505050505090505f815167ffffffffffffffff81111561166757611667611f10565b6040519080825280602002602001820160405280156116a057816020015b61168d611eaa565b8152602001906001900390816116855790505b5090505f5b82518110156115e15760055f8483815181106116c3576116c3612734565b602002602001015181526020019081526020015f20604051806101800160405290815f8201548152602001600182015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461172b90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461175790612592565b80156117a25780601f10611779576101008083540402835291602001916117a2565b820191905f5260205f20905b81548152906001019060200180831161178557829003601f168201915b505050505081526020016003820180546117bb90612592565b80601f01602080910402602001604051908101604052809291908181526020018280546117e790612592565b80156118325780601f1061180957610100808354040283529160200191611832565b820191905f5260205f20905b81548152906001019060200180831161181557829003601f168201915b5050505050815260200160048201805461184b90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461187790612592565b80156118c25780601f10611899576101008083540402835291602001916118c2565b820191905f5260205f20905b8154815290600101906020018083116118a557829003601f168201915b505050505081526020016005820180546118db90612592565b80601f016020809104026020016040519081016040528092919081815260200182805461190790612592565b80156119525780601f1061192957610100808354040283529160200191611952565b820191905f5260205f20905b81548152906001019060200180831161193557829003601f168201915b505050918352505060068201546020820152600782015460408201526008820154606082015260098201546080820152600a9091015460ff808216151560a084015261010090910416151560c09091015282518390839081106119b7576119b7612734565b60209081029190910101526001016116a5565b5f6119d3611e05565b66038d7ea4c68000341015611a215760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104b5565b600a86604051611a319190612514565b9081526040519081900360200190205460ff1615611a8d5760405162461bcd60e51b815260206004820152601960248201527814dd1bdc9859d9481a185cda08185b1c9958591e481d5cd959603a1b60448201526064016104b5565b5f865111611ad55760405162461bcd60e51b815260206004820152601560248201527414dd1bdc9859d9481a185cda081c995c5d5a5c9959605a1b60448201526064016104b5565b66038d7ea4c68000341115611b58575f33611af766038d7ea4c680003461253e565b6040515f81818185875af1925050503d805f8114611b30576040519150601f19603f3d011682016040523d82523d5f602084013e611b35565b606091505b5050905080611b565760405162461bcd60e51b81526004016104b590612551565b505b60028054905f611b678361257a565b90915550506002805460408051610180810182528281523360208083019182528284018c8152606084018c9052608084018b905260a084018a90524260c08501525f60e08501819052610100850181905261012085018190528915156101408601526001610160860181905287825260059093529490942083518155915190820180546001600160a01b0319166001600160a01b0390921691909117905591519293909290820190611c199082612616565b5060608201516003820190611c2e9082612616565b5060808201516004820190611c439082612616565b5060a08201516005820190611c589082612616565b5060c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a92830180546101609095015161ffff1990951691151561ff001916919091179315159091029290921790915560405160019190611cca908a90612514565b9081526040805160209281900383018120805460ff191694151594909417909355335f818152600884529182208054600181018255908352929091209091018390559082907fce9f5a0bc9f8c8cfa4e842523cd06798567d394210752666816e6c2bdb8f3cd290611d40908b908a904290612748565b60405180910390a3336001600160a01b03167f3e3d11fed2579ab23676d30f4893a503a2a74a2d3610026a21a83c39e2a85e2e66038d7ea4c68000604051611daf918152604060208201819052600d908201526c36b2b6b2afb1b932b0ba34b7b760991b606082015260800190565b60405180910390a29050611dc260018055565b95945050505050565b611dd3611e2f565b6001600160a01b038116611dfc57604051631e4fbdf760e01b81525f60048201526024016104b5565b61132881611e5b565b600260015403611e2857604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5f546001600160a01b03163314610fc85760405163118cdaa760e01b81523360048201526024016104b5565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061018001604052805f81526020015f6001600160a01b03168152602001606081526020016060815260200160608152602001606081526020015f81526020015f81526020015f81526020015f81526020015f151581526020015f151581525090565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112611f33575f5ffd5b813567ffffffffffffffff811115611f4d57611f4d611f10565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611f7c57611f7c611f10565b604052818152838201602001851015611f93575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f60608486031215611fc1575f5ffd5b83359250602084013567ffffffffffffffff811115611fde575f5ffd5b611fea86828701611f24565b925050604084013567ffffffffffffffff811115612006575f5ffd5b61201286828701611f24565b9150509250925092565b5f6020828403121561202c575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b86815285602082015260018060a01b038516604082015260c060608201525f61208d60c0830186612033565b828103608084015261209f8186612033565b9150508260a0830152979650505050505050565b80356001600160a01b03811681146120c9575f5ffd5b919050565b5f5f604083850312156120df575f5ffd5b6120e8836120b3565b946020939093013593505050565b8c81526001600160a01b038c166020820152610180604082018190525f906121209083018d612033565b8281036060840152612132818d612033565b90508281036080840152612146818c612033565b905082810360a084015261215a818b612033565b9150508760c08301528660e0830152856101008301528461012083015261218661014083018515159052565b8215156101608301529d9c50505050505050505050505050565b805182525f60208201516121bf60208501826001600160a01b03169052565b50604082015161018060408501526121db610180850182612033565b9050606083015184820360608601526121f48282612033565b9150506080830151848203608086015261220e8282612033565b91505060a083015184820360a08601526122288282612033565b91505060c083015160c085015260e083015160e085015261010083015161010085015261012083015161012085015261014083015161226c61014086018215159052565b506101608301516115e161016086018215159052565b602081525f6107f260208301846121a0565b5f5f604083850312156122a5575f5ffd5b823591506122b5602084016120b3565b90509250929050565b5f5f604083850312156122cf575f5ffd5b50508035926020909101359150565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561238d57603f198786030184528151805186526020810151602087015260018060a01b036040820151166040870152606081015160c0606088015261235060c0880182612033565b9050608082015187820360808901526123698282612033565b60a09384015198909301979097525094506020938401939190910190600101612304565b50929695505050505050565b5f602082840312156123a9575f5ffd5b6107f2826120b3565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561238d57603f198786030184526123f48583516121a0565b945060209384019391909101906001016123d8565b5f5f5f5f5f60a0868803121561241d575f5ffd5b853567ffffffffffffffff811115612433575f5ffd5b61243f88828901611f24565b955050602086013567ffffffffffffffff81111561245b575f5ffd5b61246788828901611f24565b945050604086013567ffffffffffffffff811115612483575f5ffd5b61248f88828901611f24565b935050606086013567ffffffffffffffff8111156124ab575f5ffd5b6124b788828901611f24565b925050608086013580151581146124cc575f5ffd5b809150509295509295909350565b5f602082840312156124ea575f5ffd5b813567ffffffffffffffff811115612500575f5ffd5b61250c84828501611f24565b949350505050565b5f82518060208501845e5f920191825250919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610ff057610ff061252a565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b5f6001820161258b5761258b61252a565b5060010190565b600181811c908216806125a657607f821691505b6020821081036125c457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561261157805f5260205f20601f840160051c810160208510156125ef5750805b601f840160051c820191505b8181101561260e575f81556001016125fb565b50505b505050565b815167ffffffffffffffff81111561263057612630611f10565b6126448161263e8454612592565b846125ca565b6020601f821160018114612676575f831561265f5750848201515b5f19600385901b1c1916600184901b17845561260e565b5f84815260208120601f198516915b828110156126a55787850151825560209485019460019092019101612685565b50848210156126c257868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b604081525f6126e36040830185612033565b8281036020840152611dc28185612033565b60208082526012908201527113595b5948191bd95cdb89dd08195e1a5cdd60721b604082015260600190565b80820180821115610ff057610ff061252a565b634e487b7160e01b5f52603260045260245ffd5b606081525f61275a6060830186612033565b828103602084015261276c8186612033565b91505082604083015294935050505056fea26469706673582212205563df76a833ffc5ecd392139d17e58971d72cedf23cfa15846927eedb6ffcc164736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createMeme(string,string,string,string,bool)": {
        "details": "Create a new meme with payment"
      },
      "getMeme(uint256)": {
        "details": "Get meme details"
      },
      "getMemeRemixes(uint256)": {
        "details": "Get remixes for a meme"
      },
      "getUserMemes(address)": {
        "details": "Get user's memes"
      },
      "hasLiked(uint256,address)": {
        "details": "Check if user liked a meme"
      },
      "likeMeme(uint256)": {
        "details": "Like a meme (free but requires gas)"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remixMeme(uint256,string,string)": {
        "details": "Remix an existing meme"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "tipCreator(uint256)": {
        "details": "Tip a meme creator"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFees()": {
        "details": "Withdraw contract funds (owner only)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 300,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "memeCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 302,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "remixCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 304,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "totalTips",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 309,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "memes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Meme)279_storage)"
      },
      {
        "astId": 314,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "remixes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Remix)292_storage)"
      },
      {
        "astId": 320,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "likes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 325,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "userMemes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 330,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "memeRemixes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/MemeRegistry.sol:MemeRegistry",
        "label": "usedStorageHashes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Meme)279_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MemeRegistry.Meme)",
        "numberOfBytes": "32",
        "value": "t_struct(Meme)279_storage"
      },
      "t_mapping(t_uint256,t_struct(Remix)292_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MemeRegistry.Remix)",
        "numberOfBytes": "32",
        "value": "t_struct(Remix)292_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Meme)279_storage": {
        "encoding": "inplace",
        "label": "struct MemeRegistry.Meme",
        "members": [
          {
            "astId": 256,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 258,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 260,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "storageHash",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 262,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "imageUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 264,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "caption",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 266,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "prompt",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 268,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 270,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "likeCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 272,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "remixCount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 274,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "tipAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 276,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "isAIGenerated",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          },
          {
            "astId": 278,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "exists",
            "offset": 1,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Remix)292_storage": {
        "encoding": "inplace",
        "label": "struct MemeRegistry.Remix",
        "members": [
          {
            "astId": 281,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 283,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "originalMemeId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 285,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "remixer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 287,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "newStorageHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 289,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "newCaption",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 291,
            "contract": "contracts/MemeRegistry.sol:MemeRegistry",
            "label": "timestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}