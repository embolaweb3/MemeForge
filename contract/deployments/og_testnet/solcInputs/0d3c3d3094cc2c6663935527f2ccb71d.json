{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/MemeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract MemeRegistry is Ownable, ReentrancyGuard {\n    struct Meme {\n        uint256 id;\n        address creator;\n        string storageHash;\n        string imageUrl;\n        string caption;\n        string prompt;\n        uint256 timestamp;\n        uint256 likeCount;\n        uint256 remixCount;\n        uint256 tipAmount;\n        bool isAIGenerated;\n        bool exists;\n    }\n\n    struct Remix {\n        uint256 id;\n        uint256 originalMemeId;\n        address remixer;\n        string newStorageHash;\n        string newCaption;\n        uint256 timestamp;\n    }\n\n    // Constants\n    uint256 public constant MINT_FEE = 0.001 ether; // 0.001 ZGS\n    uint256 public constant REMIX_FEE = 0.0005 ether; // 0.0005 ZGS\n\n    // State variables\n    uint256 public memeCounter;\n    uint256 public remixCounter;\n    uint256 public totalTips;\n\n    // Mappings\n    mapping(uint256 => Meme) public memes;\n    mapping(uint256 => Remix) public remixes;\n    mapping(uint256 => mapping(address => bool)) public likes;\n    mapping(address => uint256[]) public userMemes;\n    mapping(uint256 => uint256[]) public memeRemixes;\n    mapping(string => bool) public usedStorageHashes;\n\n    // Events\n    event MemeCreated(\n        uint256 indexed memeId,\n        address indexed creator,\n        string storageHash,\n        string caption,\n        uint256 timestamp\n    );\n\n    event MemeRemixed(\n        uint256 indexed remixId,\n        uint256 indexed originalMemeId,\n        address indexed remixer,\n        string newStorageHash,\n        string newCaption\n    );\n\n    event MemeLiked(\n        uint256 indexed memeId,\n        address indexed liker,\n        uint256 newLikeCount\n    );\n\n    event TipSent(\n        uint256 indexed memeId,\n        address indexed from,\n        address indexed to,\n        uint256 amount\n    );\n\n    event FeePaid(address indexed user, uint256 amount, string serviceType);\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Create a new meme with payment\n     */\n    function createMeme(\n        string memory _storageHash,\n        string memory _imageUrl,\n        string memory _caption,\n        string memory _prompt,\n        bool _isAIGenerated\n    ) external payable nonReentrant returns (uint256) {\n        require(msg.value >= MINT_FEE, \"Insufficient payment\");\n        require(!usedStorageHashes[_storageHash], \"Storage hash already used\");\n        require(bytes(_storageHash).length > 0, \"Storage hash required\");\n\n        // Check if user sent more than required, refund excess\n        if (msg.value > MINT_FEE) {\n            (bool success, ) = payable(msg.sender).call{\n                value: msg.value - MINT_FEE\n            }(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        memeCounter++;\n        uint256 newMemeId = memeCounter;\n\n        memes[newMemeId] = Meme({\n            id: newMemeId,\n            creator: msg.sender,\n            storageHash: _storageHash,\n            imageUrl: _imageUrl,\n            caption: _caption,\n            prompt: _prompt,\n            timestamp: block.timestamp,\n            likeCount: 0,\n            remixCount: 0,\n            tipAmount: 0,\n            isAIGenerated: _isAIGenerated,\n            exists: true\n        });\n\n        usedStorageHashes[_storageHash] = true;\n        userMemes[msg.sender].push(newMemeId);\n\n        emit MemeCreated(\n            newMemeId,\n            msg.sender,\n            _storageHash,\n            _caption,\n            block.timestamp\n        );\n        emit FeePaid(msg.sender, MINT_FEE, \"meme_creation\");\n\n        return newMemeId;\n    }\n\n    /**\n     * @dev Remix an existing meme\n     */\n    function remixMeme(\n        uint256 _originalMemeId,\n        string memory _newStorageHash,\n        string memory _newCaption\n    ) external payable nonReentrant returns (uint256) {\n        require(msg.value >= REMIX_FEE, \"Insufficient payment for remix\");\n        require(memes[_originalMemeId].exists, \"Original meme doesn't exist\");\n        require(\n            !usedStorageHashes[_newStorageHash],\n            \"Storage hash already used\"\n        );\n\n        // Refund excess\n        if (msg.value > REMIX_FEE) {\n            (bool success, ) = payable(msg.sender).call{\n                value: msg.value - REMIX_FEE\n            }(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        remixCounter++;\n        uint256 newRemixId = remixCounter;\n\n        remixes[newRemixId] = Remix({\n            id: newRemixId,\n            originalMemeId: _originalMemeId,\n            remixer: msg.sender,\n            newStorageHash: _newStorageHash,\n            newCaption: _newCaption,\n            timestamp: block.timestamp\n        });\n\n        // Update original meme remix count\n        memes[_originalMemeId].remixCount++;\n        usedStorageHashes[_newStorageHash] = true;\n        memeRemixes[_originalMemeId].push(newRemixId);\n\n        emit MemeRemixed(\n            newRemixId,\n            _originalMemeId,\n            msg.sender,\n            _newStorageHash,\n            _newCaption\n        );\n        emit FeePaid(msg.sender, REMIX_FEE, \"meme_remix\");\n\n        return newRemixId;\n    }\n\n    /**\n     * @dev Like a meme (free but requires gas)\n     */\n    function likeMeme(uint256 _memeId) external {\n        require(memes[_memeId].exists, \"Meme doesn't exist\");\n        require(!likes[_memeId][msg.sender], \"Already liked\");\n\n        likes[_memeId][msg.sender] = true;\n        memes[_memeId].likeCount++;\n\n        emit MemeLiked(_memeId, msg.sender, memes[_memeId].likeCount);\n    }\n\n    /**\n     * @dev Tip a meme creator\n     */\n    function tipCreator(uint256 _memeId) external payable nonReentrant {\n        require(memes[_memeId].exists, \"Meme doesn't exist\");\n        require(msg.value > 0, \"Tip amount must be positive\");\n        require(msg.sender != memes[_memeId].creator, \"Cannot tip yourself\");\n\n        address creator = memes[_memeId].creator;\n        memes[_memeId].tipAmount += msg.value;\n        totalTips += msg.value;\n\n        (bool success, ) = payable(creator).call{value: msg.value}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit TipSent(_memeId, msg.sender, creator, msg.value);\n    }\n\n    /**\n     * @dev Get meme details\n     */\n    function getMeme(uint256 _memeId) external view returns (Meme memory) {\n        require(memes[_memeId].exists, \"Meme doesn't exist\");\n        return memes[_memeId];\n    }\n\n    /**\n     * @dev Get remixes for a meme\n     */\n    function getMemeRemixes(\n        uint256 _memeId\n    ) external view returns (Remix[] memory) {\n        uint256[] memory remixIds = memeRemixes[_memeId];\n        Remix[] memory memeRemixesList = new Remix[](remixIds.length);\n\n        for (uint256 i = 0; i < remixIds.length; i++) {\n            memeRemixesList[i] = remixes[remixIds[i]];\n        }\n\n        return memeRemixesList;\n    }\n\n    /**\n     * @dev Get user's memes\n     */\n    function getUserMemes(address _user) external view returns (Meme[] memory) {\n        uint256[] memory userMemeIds = userMemes[_user];\n        Meme[] memory userMemeList = new Meme[](userMemeIds.length);\n\n        for (uint256 i = 0; i < userMemeIds.length; i++) {\n            userMemeList[i] = memes[userMemeIds[i]];\n        }\n\n        return userMemeList;\n    }\n\n    /**\n     * @dev Check if user liked a meme\n     */\n    function hasLiked(\n        uint256 _memeId,\n        address _user\n    ) external view returns (bool) {\n        return likes[_memeId][_user];\n    }\n\n    /**\n     * @dev Withdraw contract funds (owner only)\n     */\n    function withdrawFees() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n        (bool success, ) = payable(owner()).call{\n                value: balance\n            }(\"\");\n            require(success, \"Transfer failed\");\n    }\n}\n"
    },
    "contracts/PaymentHandler.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract PaymentHandler is Ownable, ReentrancyGuard {\n    struct ServicePayment {\n        address user;\n        uint256 amount;\n        string serviceType; // \"ai_generation\", \"storage\", \"mint\", \"remix\"\n        uint256 timestamp;\n        bool completed;\n    }\n\n    // Service fees (in wei)\n    uint256 public aiGenerationFee = 0.0003 ether; // 0.0003 0G\n    uint256 public storageFee = 0.0002 ether; // 0.0002 0G\n    uint256 public mintFee = 0.001 ether; // 0.001 0G\n    uint256 public remixFee = 0.0005 ether; // 0.0005 0G\n\n    mapping(address => uint256) public userBalances;\n    mapping(bytes32 => ServicePayment) public payments;\n\n    event PaymentReceived(\n        address indexed user,\n        uint256 amount,\n        string serviceType,\n        bytes32 paymentId\n    );\n\n    event ServiceCompleted(\n        bytes32 indexed paymentId,\n        address indexed user,\n        string serviceType\n    );\n\n    event RefundIssued(\n        bytes32 indexed paymentId,\n        address indexed user,\n        uint256 amount\n    );\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Pay for a service\n     */\n    function payForService(\n        string memory _serviceType\n    ) external payable nonReentrant returns (bytes32) {\n        uint256 requiredFee = getServiceFee(_serviceType);\n        require(msg.value >= requiredFee, \"Insufficient payment\");\n\n        bytes32 paymentId = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                _serviceType,\n                block.timestamp,\n                block.prevrandao\n            )\n        );\n\n        payments[paymentId] = ServicePayment({\n            user: msg.sender,\n            amount: msg.value,\n            serviceType: _serviceType,\n            timestamp: block.timestamp,\n            completed: false\n        });\n\n        // Refund excess\n        if (msg.value > requiredFee) {\n            uint256 refundAmount = msg.value - requiredFee;\n            (bool success,) = payable(msg.sender).call{value : refundAmount}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit PaymentReceived(msg.sender, requiredFee, _serviceType, paymentId);\n        return paymentId;\n    }\n\n    /**\n     * @dev Complete a service\n     */\n    function completeService(bytes32 _paymentId) external onlyOwner {\n        require(payments[_paymentId].user != address(0), \"Payment not found\");\n        require(!payments[_paymentId].completed, \"Service already completed\");\n\n        payments[_paymentId].completed = true;\n\n        emit ServiceCompleted(\n            _paymentId,\n            payments[_paymentId].user,\n            payments[_paymentId].serviceType\n        );\n    }\n\n    /**\n     * @dev Refund a payment\n     */\n    function refundPayment(bytes32 _paymentId) external onlyOwner nonReentrant {\n        ServicePayment memory payment = payments[_paymentId];\n        require(payment.user != address(0), \"Payment not found\");\n        require(!payment.completed, \"Service already completed\");\n\n        (bool success,) = payable(payment.user).call{value :payment.amount}(\"\");\n        require(success, \"Transfer failed\");\n        payments[_paymentId].completed = true;\n\n        emit RefundIssued(_paymentId, payment.user, payment.amount);\n    }\n\n    /**\n     * @dev Get fee for a service\n     */\n    function getServiceFee(\n        string memory _serviceType\n    ) public view returns (uint256) {\n        if (\n            keccak256(abi.encodePacked(_serviceType)) ==\n            keccak256(abi.encodePacked(\"ai_generation\"))\n        ) {\n            return aiGenerationFee;\n        } else if (\n            keccak256(abi.encodePacked(_serviceType)) ==\n            keccak256(abi.encodePacked(\"storage\"))\n        ) {\n            return storageFee;\n        } else if (\n            keccak256(abi.encodePacked(_serviceType)) ==\n            keccak256(abi.encodePacked(\"mint\"))\n        ) {\n            return mintFee;\n        } else if (\n            keccak256(abi.encodePacked(_serviceType)) ==\n            keccak256(abi.encodePacked(\"remix\"))\n        ) {\n            return remixFee;\n        }\n        revert(\"Unknown service type\");\n    }\n\n    /**\n     * @dev Update service fees (owner only)\n     */\n    function updateFees(\n        uint256 _aiFee,\n        uint256 _storageFee,\n        uint256 _mintFee,\n        uint256 _remixFee\n    ) external onlyOwner {\n        aiGenerationFee = _aiFee;\n        storageFee = _storageFee;\n        mintFee = _mintFee;\n        remixFee = _remixFee;\n    }\n\n    /**\n     * @dev Withdraw collected fees\n     */\n    function withdrawFees() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No funds to withdraw\");\n\n        (bool success, ) = payable(owner()).call{value: balance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "cancun",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}