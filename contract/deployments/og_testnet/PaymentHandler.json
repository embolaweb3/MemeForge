{
  "address": "0x75Cae856B727fA0B99A3961B820a6aFbdc10626c",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serviceType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RefundIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "paymentId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serviceType",
          "type": "string"
        }
      ],
      "name": "ServiceCompleted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aiGenerationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentId",
          "type": "bytes32"
        }
      ],
      "name": "completeService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_serviceType",
          "type": "string"
        }
      ],
      "name": "getServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_serviceType",
          "type": "string"
        }
      ],
      "name": "payForService",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serviceType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_paymentId",
          "type": "bytes32"
        }
      ],
      "name": "refundPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remixFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_aiFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_storageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_remixFee",
          "type": "uint256"
        }
      ],
      "name": "updateFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2920b42b91f68b4e46531c02bf3461958a9bd236f5adf143583831138489dd54",
  "receipt": {
    "to": null,
    "from": "0x03b5AD7cD8EFeaC72d50444ae53ebA424CEBCEab",
    "contractAddress": "0x75Cae856B727fA0B99A3961B820a6aFbdc10626c",
    "transactionIndex": 0,
    "gasUsed": "1129161",
    "logsBloom": "0x
    "blockHash": "0x0f0b4ff64ccf34ac09b6c21cf12a3ca5fbf3cbb24a5be848331a88eb37f8c98d",
    "transactionHash": "0x2920b42b91f68b4e46531c02bf3461958a9bd236f5adf143583831138489dd54",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2057314,
        "transactionHash": "0x2920b42b91f68b4e46531c02bf3461958a9bd236f5adf143583831138489dd54",
        "address": "0x75Cae856B727fA0B99A3961B820a6aFbdc10626c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000003b5ad7cd8efeac72d50444ae53eba424cebceab"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0f0b4ff64ccf34ac09b6c21cf12a3ca5fbf3cbb24a5be848331a88eb37f8c98d"
      }
    ],
    "blockNumber": 2057314,
    "cumulativeGasUsed": "1129161",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d3c3d3094cc2c6663935527f2ccb71d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceType\",\"type\":\"string\"}],\"name\":\"ServiceCompleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aiGenerationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentId\",\"type\":\"bytes32\"}],\"name\":\"completeService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serviceType\",\"type\":\"string\"}],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serviceType\",\"type\":\"string\"}],\"name\":\"payForService\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serviceType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_paymentId\",\"type\":\"bytes32\"}],\"name\":\"refundPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remixFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_aiFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remixFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"completeService(bytes32)\":{\"details\":\"Complete a service\"},\"getServiceFee(string)\":{\"details\":\"Get fee for a service\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payForService(string)\":{\"details\":\"Pay for a service\"},\"refundPayment(bytes32)\":{\"details\":\"Refund a payment\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFees(uint256,uint256,uint256,uint256)\":{\"details\":\"Update service fees (owner only)\"},\"withdrawFees()\":{\"details\":\"Withdraw collected fees\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentHandler.sol\":\"PaymentHandler\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/PaymentHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract PaymentHandler is Ownable, ReentrancyGuard {\\n    struct ServicePayment {\\n        address user;\\n        uint256 amount;\\n        string serviceType; // \\\"ai_generation\\\", \\\"storage\\\", \\\"mint\\\", \\\"remix\\\"\\n        uint256 timestamp;\\n        bool completed;\\n    }\\n\\n    // Service fees (in wei)\\n    uint256 public aiGenerationFee = 0.0003 ether; // 0.0003 0G\\n    uint256 public storageFee = 0.0002 ether; // 0.0002 0G\\n    uint256 public mintFee = 0.001 ether; // 0.001 0G\\n    uint256 public remixFee = 0.0005 ether; // 0.0005 0G\\n\\n    mapping(address => uint256) public userBalances;\\n    mapping(bytes32 => ServicePayment) public payments;\\n\\n    event PaymentReceived(\\n        address indexed user,\\n        uint256 amount,\\n        string serviceType,\\n        bytes32 paymentId\\n    );\\n\\n    event ServiceCompleted(\\n        bytes32 indexed paymentId,\\n        address indexed user,\\n        string serviceType\\n    );\\n\\n    event RefundIssued(\\n        bytes32 indexed paymentId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Pay for a service\\n     */\\n    function payForService(\\n        string memory _serviceType\\n    ) external payable nonReentrant returns (bytes32) {\\n        uint256 requiredFee = getServiceFee(_serviceType);\\n        require(msg.value >= requiredFee, \\\"Insufficient payment\\\");\\n\\n        bytes32 paymentId = keccak256(\\n            abi.encodePacked(\\n                msg.sender,\\n                _serviceType,\\n                block.timestamp,\\n                block.prevrandao\\n            )\\n        );\\n\\n        payments[paymentId] = ServicePayment({\\n            user: msg.sender,\\n            amount: msg.value,\\n            serviceType: _serviceType,\\n            timestamp: block.timestamp,\\n            completed: false\\n        });\\n\\n        // Refund excess\\n        if (msg.value > requiredFee) {\\n            uint256 refundAmount = msg.value - requiredFee;\\n            (bool success,) = payable(msg.sender).call{value : refundAmount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n\\n        emit PaymentReceived(msg.sender, requiredFee, _serviceType, paymentId);\\n        return paymentId;\\n    }\\n\\n    /**\\n     * @dev Complete a service\\n     */\\n    function completeService(bytes32 _paymentId) external onlyOwner {\\n        require(payments[_paymentId].user != address(0), \\\"Payment not found\\\");\\n        require(!payments[_paymentId].completed, \\\"Service already completed\\\");\\n\\n        payments[_paymentId].completed = true;\\n\\n        emit ServiceCompleted(\\n            _paymentId,\\n            payments[_paymentId].user,\\n            payments[_paymentId].serviceType\\n        );\\n    }\\n\\n    /**\\n     * @dev Refund a payment\\n     */\\n    function refundPayment(bytes32 _paymentId) external onlyOwner nonReentrant {\\n        ServicePayment memory payment = payments[_paymentId];\\n        require(payment.user != address(0), \\\"Payment not found\\\");\\n        require(!payment.completed, \\\"Service already completed\\\");\\n\\n        (bool success,) = payable(payment.user).call{value :payment.amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        payments[_paymentId].completed = true;\\n\\n        emit RefundIssued(_paymentId, payment.user, payment.amount);\\n    }\\n\\n    /**\\n     * @dev Get fee for a service\\n     */\\n    function getServiceFee(\\n        string memory _serviceType\\n    ) public view returns (uint256) {\\n        if (\\n            keccak256(abi.encodePacked(_serviceType)) ==\\n            keccak256(abi.encodePacked(\\\"ai_generation\\\"))\\n        ) {\\n            return aiGenerationFee;\\n        } else if (\\n            keccak256(abi.encodePacked(_serviceType)) ==\\n            keccak256(abi.encodePacked(\\\"storage\\\"))\\n        ) {\\n            return storageFee;\\n        } else if (\\n            keccak256(abi.encodePacked(_serviceType)) ==\\n            keccak256(abi.encodePacked(\\\"mint\\\"))\\n        ) {\\n            return mintFee;\\n        } else if (\\n            keccak256(abi.encodePacked(_serviceType)) ==\\n            keccak256(abi.encodePacked(\\\"remix\\\"))\\n        ) {\\n            return remixFee;\\n        }\\n        revert(\\\"Unknown service type\\\");\\n    }\\n\\n    /**\\n     * @dev Update service fees (owner only)\\n     */\\n    function updateFees(\\n        uint256 _aiFee,\\n        uint256 _storageFee,\\n        uint256 _mintFee,\\n        uint256 _remixFee\\n    ) external onlyOwner {\\n        aiGenerationFee = _aiFee;\\n        storageFee = _storageFee;\\n        mintFee = _mintFee;\\n        remixFee = _remixFee;\\n    }\\n\\n    /**\\n     * @dev Withdraw collected fees\\n     */\\n    function withdrawFees() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\n\\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1a370fb3c3697292cc4b421aaae815cff57fd6771eaf1f36914b6606dd921d97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052660110d9316ec00060025565b5e620f4800060035566038d7ea4c680006004556601c6bf526340006005553480156039575f5ffd5b503380605e57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b606581606e565b506001805560bd565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6110f5806100ca5f395ff3fe6080604052600436106100e4575f3560e01c8063715018a611610087578063c6616ba111610057578063c6616ba11461023a578063de8f8b3f14610259578063e747657014610278578063f2fde38b1461028d575f5ffd5b8063715018a6146101d8578063773f0b18146101ec5780638da5cb5b14610201578063a9ce953a14610227575f5ffd5b806318274da4116100c257806318274da41461015957806326224c64146101785780633d558a21146101a3578063476343ee146101c4575f5ffd5b80630716326d146100e857806313966db514610121578063164e375514610144575b5f5ffd5b3480156100f3575f5ffd5b50610107610102366004610c84565b6102ac565b604051610118959493929190610cc9565b60405180910390f35b34801561012c575f5ffd5b5061013660045481565b604051908152602001610118565b34801561014f575f5ffd5b5061013660025481565b348015610164575f5ffd5b50610136610173366004610d1c565b61036e565b348015610183575f5ffd5b50610136610192366004610dcf565b60066020525f908152604090205481565b3480156101ae575f5ffd5b506101c26101bd366004610c84565b610535565b005b3480156101cf575f5ffd5b506101c261065b565b3480156101e3575f5ffd5b506101c261071c565b3480156101f7575f5ffd5b5061013660035481565b34801561020c575f5ffd5b505f546040516001600160a01b039091168152602001610118565b610136610235366004610d1c565b61072f565b348015610245575f5ffd5b506101c2610254366004610dfc565b61091c565b348015610264575f5ffd5b506101c2610273366004610c84565b610938565b348015610283575f5ffd5b5061013660055481565b348015610298575f5ffd5b506101c26102a7366004610dcf565b610ba5565b60076020525f90815260409020805460018201546002830180546001600160a01b039093169391926102dd90610e2b565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610e2b565b80156103545780601f1061032b57610100808354040283529160200191610354565b820191905f5260205f20905b81548152906001019060200180831161033757829003601f168201915b50505050600383015460049093015491929160ff16905085565b6040516c30b4afb3b2b732b930ba34b7b760991b60208201525f90602d0160405160208183030381529060405280519060200120826040516020016103b39190610e7a565b60405160208183030381529060405280519060200120036103d657505060025490565b6040516673746f7261676560c81b602082015260270160405160208183030381529060405280519060200120826040516020016104139190610e7a565b604051602081830303815290604052805190602001200361043657505060035490565b604051631b5a5b9d60e21b602082015260240160405160208183030381529060405280519060200120826040516020016104709190610e7a565b604051602081830303815290604052805190602001200361049357505060045490565b604051640e4cadad2f60db1b602082015260250160405160208183030381529060405280519060200120826040516020016104ce9190610e7a565b60405160208183030381529060405280519060200120036104f157505060055490565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e2073657276696365207479706560601b60448201526064015b60405180910390fd5b61053d610bdf565b5f818152600760205260409020546001600160a01b03166105945760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081b9bdd08199bdd5b99607a1b604482015260640161052c565b5f8181526007602052604090206004015460ff16156105f15760405162461bcd60e51b815260206004820152601960248201527814d95c9d9a58d948185b1c9958591e4818dbdb5c1b195d1959603a1b604482015260640161052c565b5f818152600760205260409081902060048101805460ff19166001179055805491516001600160a01b039092169183917f7b35762f349c90fbc5487e255491e38e9ff70ef1b20941a93601fc3ab26a99da916106509160020190610e85565b60405180910390a350565b610663610bdf565b47806106a85760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b604482015260640161052c565b5f80546040516001600160a01b039091169083908381818185875af1925050503d805f81146106f2576040519150601f19603f3d011682016040523d82523d5f602084013e6106f7565b606091505b50509050806107185760405162461bcd60e51b815260040161052c90610f0c565b5050565b610724610bdf565b61072d5f610c0b565b565b5f610738610c5a565b5f6107428361036e565b90508034101561078b5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b604482015260640161052c565b5f338442446040516020016107a39493929190610f35565b60408051808303601f19018152828252805160209182012060a084018352338452348285019081528484018981524260608701525f60808701819052838152600790945293909220845181546001600160a01b0319166001600160a01b039091161781559151600183015591519193509060028201906108239082610fb7565b50606082015160038201556080909101516004909101805460ff1916911515919091179055348210156108c6575f61085b8334611072565b6040519091505f90339083908381818185875af1925050503d805f811461089d576040519150601f19603f3d011682016040523d82523d5f602084013e6108a2565b606091505b50509050806108c35760405162461bcd60e51b815260040161052c90610f0c565b50505b336001600160a01b03167f08ff71dfa71080c2a3b2472069ed760b8d6dab569264c3601cb6b6ad70d1373583868460405161090393929190611097565b60405180910390a291505061091760018055565b919050565b610924610bdf565b600293909355600391909155600455600555565b610940610bdf565b610948610c5a565b5f818152600760209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600281018054919284019161098d90610e2b565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990610e2b565b8015610a045780601f106109db57610100808354040283529160200191610a04565b820191905f5260205f20905b8154815290600101906020018083116109e757829003601f168201915b50505091835250506003820154602082015260049091015460ff16151560409091015280519091506001600160a01b0316610a755760405162461bcd60e51b815260206004820152601160248201527014185e5b595b9d081b9bdd08199bdd5b99607a1b604482015260640161052c565b806080015115610ac35760405162461bcd60e51b815260206004820152601960248201527814d95c9d9a58d948185b1c9958591e4818dbdb5c1b195d1959603a1b604482015260640161052c565b805160208201516040515f926001600160a01b031691908381818185875af1925050503d805f8114610b10576040519150601f19603f3d011682016040523d82523d5f602084013e610b15565b606091505b5050905080610b365760405162461bcd60e51b815260040161052c90610f0c565b5f83815260076020908152604091829020600401805460ff1916600117905583518482015192519283526001600160a01b03169185917ff8590cd6b8c44be7a2bc57131f10e203ec5f7d7f2f761e1508a8cc964ecb9eb7910160405180910390a35050610ba260018055565b50565b610bad610bdf565b6001600160a01b038116610bd657604051631e4fbdf760e01b81525f600482015260240161052c565b610ba281610c0b565b5f546001600160a01b0316331461072d5760405163118cdaa760e01b815233600482015260240161052c565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600260015403610c7d57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b5f60208284031215610c94575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b60018060a01b038616815284602082015260a060408201525f610cef60a0830186610c9b565b6060830194909452509015156080909101529392505050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610d2c575f5ffd5b813567ffffffffffffffff811115610d42575f5ffd5b8201601f81018413610d52575f5ffd5b803567ffffffffffffffff811115610d6c57610d6c610d08565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610d9b57610d9b610d08565b604052818152828201602001861015610db2575f5ffd5b816020840160208301375f91810160200191909152949350505050565b5f60208284031215610ddf575f5ffd5b81356001600160a01b0381168114610df5575f5ffd5b9392505050565b5f5f5f5f60808587031215610e0f575f5ffd5b5050823594602084013594506040840135936060013592509050565b600181811c90821680610e3f57607f821691505b602082108103610e5d57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f81518060208401855e5f93019283525090919050565b5f610df58284610e63565b602081525f5f8354610e9681610e2b565b806020860152600182165f8114610eb45760018114610ed057610f01565b60ff1983166040870152604082151560051b8701019350610f01565b865f5260205f205f5b83811015610ef857815488820160400152600190910190602001610ed9565b87016040019450505b509195945050505050565b6020808252600f908201526e151c985b9cd9995c8819985a5b1959608a1b604082015260600190565b6bffffffffffffffffffffffff198560601b1681525f610f586014830186610e63565b9384525050602082015260400192915050565b601f821115610fb257805f5260205f20601f840160051c81016020851015610f905750805b601f840160051c820191505b81811015610faf575f8155600101610f9c565b50505b505050565b815167ffffffffffffffff811115610fd157610fd1610d08565b610fe581610fdf8454610e2b565b84610f6b565b6020601f821160018114611017575f83156110005750848201515b5f19600385901b1c1916600184901b178455610faf565b5f84815260208120601f198516915b828110156110465787850151825560209485019460019092019101611026565b508482101561106357868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8181038181111561109157634e487b7160e01b5f52601160045260245ffd5b92915050565b838152606060208201525f6110af6060830185610c9b565b905082604083015294935050505056fea2646970667358221220328eebfed4c89fb83432d87663b128598fad2b301014c38c17b029895dadfb2464736f6c634300081c0033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "completeService(bytes32)": {
        "details": "Complete a service"
      },
      "getServiceFee(string)": {
        "details": "Get fee for a service"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payForService(string)": {
        "details": "Pay for a service"
      },
      "refundPayment(bytes32)": {
        "details": "Refund a payment"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFees(uint256,uint256,uint256,uint256)": {
        "details": "Update service fees (owner only)"
      },
      "withdrawFees()": {
        "details": "Withdraw collected fees"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 188,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1003,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "aiGenerationFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1006,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "storageFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1009,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "mintFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1012,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "remixFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1016,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "userBalances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1021,
        "contract": "contracts/PaymentHandler.sol:PaymentHandler",
        "label": "payments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(ServicePayment)1000_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(ServicePayment)1000_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PaymentHandler.ServicePayment)",
        "numberOfBytes": "32",
        "value": "t_struct(ServicePayment)1000_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ServicePayment)1000_storage": {
        "encoding": "inplace",
        "label": "struct PaymentHandler.ServicePayment",
        "members": [
          {
            "astId": 991,
            "contract": "contracts/PaymentHandler.sol:PaymentHandler",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 993,
            "contract": "contracts/PaymentHandler.sol:PaymentHandler",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 995,
            "contract": "contracts/PaymentHandler.sol:PaymentHandler",
            "label": "serviceType",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 997,
            "contract": "contracts/PaymentHandler.sol:PaymentHandler",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 999,
            "contract": "contracts/PaymentHandler.sol:PaymentHandler",
            "label": "completed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}